version: "3.8"
# common commands:

# docker system prune -f --volumes
# Restart a container or scale
#docker-compose up -d --scale product=0
#docker-compose up -d --scale product=1
services:
  product:
    container_name: product
    build: services/product-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - microservices
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  recommendation:
    container_name: recommendation
    build: services/recomendation-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - microservices
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  review:
    container_name: review
    build: services/review-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - microservices
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-composite:
    container_name: product-composite
    build: services/product-composite-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - microservices
    depends_on:
      rabbitmq:
        condition: service_healthy

  config-server:
    container_name: config-server
    deploy:
      resources:
        limits:
          memory: 350M
        reservations:
          memory: 250M
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config_repo:/config_repo
    build: spring-cloud/config-server
    networks:
      - microservices
  #    mem_limit: 350m -> docker-compose < 3.0

  # Eureka server - discovery service patter
  eureka:
    container_name: eureka
    build: spring-cloud/eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    mem_limit: 350m
    networks:
      - microservices

  # Since we are implementing age Service we do not need to expose this service directly.
  # now our gateway will take care of
  gateway:
    container_name: gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_SSL_KEY_STORE=file:/keystore/edge-test.p12
      - SERVER_SSL_KEY_STORE_PASSWORD=testtest
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/keystore:/keystore
    build: spring-cloud/gateway
    mem_limit: 350m
    ports:
      - "8443:8443"
    networks:
      - microservices
    depends_on:
      - config-server

  auth-server:
    container_name: auth-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/authorization-server
    mem_limit: 350m
    networks:
      - microservices

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    deploy:
      resources:
        limits:
          memory: 350M
    ports:
      - "27017:27017"
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10
#    command: mongod --smallfiles
    networks:
      - microservices

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7
    deploy:
      resources:
        limits:
          memory: 350M
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-uuser", "-ppwd", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - microservices

  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: rabbit_mq
    deploy:
      resources:
        limits:
          memory: 350M
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - microservices

networks:
  microservices:
    driver: bridge
