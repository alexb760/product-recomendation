server.port: 7001


server.error.include-message: always

# Event-Driver configuration
spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings.input:
    destination: products
    group: productsGroup

spring.cloud.stream.bindings.input.consumer:
  maxAttempts: 3
  backOffInitialInterval: 500
  backOffMaxInterval: 1000
  backOffMultiplier: 2.0

spring.cloud.stream.rabbit.bindings.input.consumer:
  autoBindDlq: true
  republishToDlq: true

spring.cloud.stream.kafka.bindings.input.consumer:
  enableDlq: true

#spring.rabbitmq:
#  host: 127.0.0.1
#  port: 5672
#  username: guest
#  password: guest
# Fin

spring.data.mongodb:
  host: localhost
  port: 27017
  database: product-db

logging:
  level:
    root: INFO
    com.book.microservices: DEBUG
    org.springframework.data.mongodb.core.MongoTemplate: DEBUG


# When we use yml we can separate different profile by adding
# `---`
# that means when we run our application with profile 'docker' it will overwrite previous one
# server.port: 7001

---
config:
  activate:
    on-profile: docker

spring.data.mongodb.host: mongodb
server.port: 8080
#eureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka/
#
#---
#config:
#  activate:
#    on-profile: streaming_partitioned
#spring.cloud.stream.bindings.input.consumer:
#  partitioned: true
#  instanceCount: 2
#
#---
#config:
#  activate:
#    on-profile: streaming_instance_0
#spring.cloud.stream.bindings.input.consumer.instanceIndex: 0
#
#---
#config:
#  activate:
#    on-profile: streaming_instance_1
#spring.cloud.stream.bindings.input.consumer.instanceIndex: 1
#
#---
#config:
#  activate:
#    on-profile: kafka
#
#management.health.rabbit.enabled: false
#spring.cloud.stream.defaultBinder: kafka
