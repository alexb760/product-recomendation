api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: alexb760@gmail.com

  product-composite:

    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Base product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Product id 113
        200 - Ok, but no recommendations will be returned
        ## Product id 213
        200 - Ok, but no reviews will be returned
        ## Non numerical product id
        400 - A <b>Bad Request</b> error will be returned
        ## Product id 13
        404 - A <b>Not Found</b> error will be returned
        ## Negative product ids
        422 - An <b>Unprocessable Entity</b> error will be returned


server.port: 7000
server.error.include-message: always

ribbon.ServerListRefreshInterval: 5000
ribbon.NFLoadBalancerPingInterval: 5

spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://auth-server:9999/.well-known/jwks.json
#Eureka client configuration.
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: "http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/"
#    initialInstanceInfoReplicationIntervalSeconds: 5
#    registryFetchIntervalSeconds: 5
#  instance:
#    leaseRenewalIntervalInSeconds: 5
#    leaseExpirationDurationInSeconds: 5


# *************** Kafka and RabbitNQ ******************#
spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-products:
      destination: products
      producer:
        required-groups: auditGroup
    output-recommendations:
      destination: recommendations
      producer:
        required-groups: auditGroup
    output-reviews:
      destination: reviews
      producer:
        required-groups: auditGroup

#spring.cloud.stream.kafka.binder:
#  brokers: 127.0.0.1
#  defaultBrokerPort: 9092
#
#spring.rabbitmq:
#  host: 127.0.0.1
#  port: 5672
#  username: guest
#  password: guest
  # *************** Kafka and RabbitNQ ******************#

logging:
  level:
    root: INFO
    com.book.microservices: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

---
config:
  activate:
    on-profile: docker
server.port: 8080

#---
#config:
#  activate:
#    on-profile: streaming_partitioned
#
#spring.cloud.stream.bindings.output-products.producer:
#  partition-key-expression: payload.key
#  partition-count: 2
#
#spring.cloud.stream.bindings.output-recommendations.producer:
#  partition-key-expression: payload.key
#  partition-count: 2
#
#spring.cloud.stream.bindings.output-reviews.producer:
#  partition-key-expression: payload.key
#  partition-count: 2
#
#---
#config:
#  activate:
#    on-profile: kafka
#
#management.health.rabbit.enabled: false
#spring.cloud.stream.defaultBinder: kafka
